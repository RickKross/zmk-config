/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TRI     3

&gresc {
    keep-mods = <(MOD_LSFT)>;
};

/ {
    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        combo_enter {
            bindings = <&kp RET>;
            key-positions = <46 47>;
            layers = <0>;
        };

        combo_ch_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <34 47>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q      &kp W     &kp E     &kp R  &kp T  &kp C_VOL_UP  &kp PG_UP  &kp Y  &kp U  &kp I     &kp O      &kp P     &kp MINUS
&kp LCTRL      &kp A      &kp S     &kp D     &kp F  &kp G  &kp C_VOL_DN  &kp PG_DN  &kp H  &kp J  &kp K     &kp L      &kp SEMI  &kp SQT
&kp LSHFT      &kp SLASH  &kp Z     &kp X     &kp C  &kp V  &kp K_MUTE               &kp B  &kp N  &kp M     &kp COMMA  &kp DOT   &kp BACKSPACE
&mt GRAVE ESC  &none      &kp LGUI  &kp LALT         &mo 1  &kp SPACE     &kp SPACE  &mo 2         &kp LEFT  &kp RIGHT  &kp LALT  &kp LGUI
            >;
        };

        left_layer {
            bindings = <
&trans  &none  &kp F1  &kp F2   &kp F3   &kp F4   &kp PRINTSCREEN  &none      &kp KP_PLUS   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &kp BACKSPACE
&trans  &none  &kp F5  &kp F6   &kp F7   &kp F8   &kp K_MENU       &none      &kp KP_MINUS  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DIVIDE    &kp EQUAL
&trans  &none  &kp F9  &kp F10  &kp F11  &kp F12  &none                       &none         &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT       &none
&trans  &none  &none   &trans            &trans   &kp ENTER        &kp ENTER  &trans                         &kp KP_NUMBER_0  &none            &none            &none
            >;
        };

        right_layer {
            bindings = <
&trans    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp DEL    &kt BACKSPACE  &kp PG_UP  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  &kp LBKT   &kp RBKT
&trans    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none      &none          &kp PG_DN  &kp LEFT      &kp DOWN  &kp RIGHT      &kp COLON  &kp EQUAL
&trans    &none   &none   &none   &none   &none   &none                     &none      &kp HOME      &none     &kp END        &none      &none
&kp LWIN  &none   &none   &trans          &trans  &kp ENTER  &kp ENTER      &trans                   &none     &none          &none      &kp BACKSLASH
            >;
        };

        tri_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &sys_reset      &sys_reset   &kp N3  &none  &none  &none  &none  &none
&bt BT_PRV  &bt BT_NXT    &none         &none         &none         &none         &bootloader     &bootloader  &none   &none  &none  &none  &none  &none
&trans      &none         &none         &none         &none         &none         &kp CLCK                     &none   &none  &none  &none  &none  &none
&trans      &none         &none         &trans                      &trans        &kp KP_NUMLOCK  &none        &trans         &none  &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
